/**
 * @file   zip
 * @author  <jens.munk.hansen@gmail.com>
 * @date   Wed Aug 26 14:17:38 2015
 * 
 * @brief  
 * 
 * 
 */
#pragma once

// TODO: Consider implementing weighted min/max using zip

#include <tuple>
#include <iterator>

namespace std {

#ifdef __GNUG__
  namespace __zip {
    template <typename Iterator>
    void advance_all (Iterator & iterator) {
      ++iterator;
    }
    template <typename Iterator, typename ... Iterators>
    void advance_all (Iterator & iterator, Iterators& ... iterators) {
      ++iterator;
      advance_all(iterators...);
    }
  }  // namespace __zip

  /** 
   * Operate on multiple STL containers by advancing multiple iterators
   * 
   * @param func Functional, e.g. a lambda, std::func or operator
   * @param begin Iterator begin
   * @param end   Iterator end
   * @param iterators Other iterators
   * 
   * @return The functor
   *
   * Example
   *
   *  xs = std::vector<T>;
   *  ws = std::vector<T>;
   *  size_t nValidData = 0;
   *  std::zip( [&](typename std::vector<T>::const_iterator xi,
   *                typename std::vector<T>::const_iterator wi)->void {
   *              if (*wi > T(0.0)) {
   *                nValidData++;
   *              }
   *            }, xs->begin(), xs->end(), ws->begin());
   * 
   */
  template <typename Function, typename Iterator, typename ... Iterators>
  Function zip (Function func, Iterator begin, Iterator end, Iterators ... iterators) {
    for(;begin != end; ++begin, __zip::advance_all(iterators...))
      func(begin, (iterators)... );
    return func;
  }
#elif defined(_MSC_VER) && defined(__cplusplus)
  template <typename Function, typename Iterator, typename Iterator2>
  Function zip (Function func, Iterator begin, Iterator end, Iterator2 it2) {
    for(;begin != end; ++begin, it2++)
      func(begin, it2);
    return func;    
  }

  template <typename Function, typename Iterator, typename Iterator2, typename Iterator3>
  Function zip (Function func, Iterator begin, Iterator end, Iterator2 it2, Iterator3 it3) {
    for(;begin != end; ++begin, it2++, it3++)
      func(begin, it2, it3);
    return func;    
  }
#endif
}  // namespace std

/* Local variables: */
/* mode: c++ */
/* indent-tab-mode: nil */
/* tab-width: 2 */
/* c-basic-offset: 2 */
/* End: */
