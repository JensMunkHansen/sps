/**
 * @file   string
 * @author Jens Munk Hansen <jmh@debian9laptop.parknet.dk>
 * @date   Fri Mar 13 00:15:07 2020
 *
 * @brief
 *
 * Copyright 2020 Jens Munk Hansen
 */

#pragma once

#include <string>
#include <memory>
#include <stdexcept>

#include <sps/cenv.h>

namespace sps {
namespace details {

template<typename T>
auto convert(T&& t) {
  if constexpr (std::is_same<std::remove_cv_t<std::remove_reference_t<T>>, std::string>::value) {
    return std::forward<T>(t).c_str();
  }
  else {
    return std::forward<T>(t);
  }
}

template<typename ... Args>
std::string stringFormatInternal(const std::string& format, Args&& ... args)
{
  size_t size = snprintf(nullptr, 0, format.c_str(), std::forward<Args>(args) ...) + 1;
  if( size <= 0 ){
    throw std::runtime_error( "Error during formatting." );
  }
  std::unique_ptr<char[]> buf(new char[size]);
  snprintf(buf.get(), size, format.c_str(), args ...);
  return std::string(buf.get(), buf.get() + size - 1);
}
}  // namespace details

#ifdef CXX17
template<typename ... Args>
std::string string_format(std::string fmt, Args&& ... args) {
  return details::stringFormatInternal(fmt, convert(std::forward<Args>(args))...);
}
#elif defined(CXX14) | defined(CXX11)
template<typename ... Args>
std::string string_format( const std::string& format, Args ... args ) {
  size_t size = snprintf( nullptr, 0, format.c_str(), args ... ) + 1; // Extra space for '\0'
  if( size <= 0 ) {
    throw std::runtime_error( "Error during formatting." );
  }
  std::unique_ptr<char[]> buf( new char[ size ] );
  snprintf( buf.get(), size, format.c_str(), args ... );
  return std::string( buf.get(), buf.get() + size - 1 ); // We don't want the '\0' inside
}
#endif
}  // namespace sps

/* Local variables: */
/* indent-tab-mode: nil */
/* tab-width: 2 */
/* c-basic-offset: 2 */
/* End: */
