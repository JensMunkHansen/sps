#pragma once

#include <sps/cenv.h>
#include <new>

namespace sps {

namespace details {
struct nullopt_t {};
static const nullopt_t nullopt;

template<typename T>
class optional {
 public:
  optional(const T& object) : m_initialized(true) { new (m_object) T(object); };
  optional(nullopt_t) : m_initialized(false) {};
  optional() : m_initialized(false) {};
  optional(const optional& other) : m_initialized(other.m_initialized) {
    if (other.m_initialized)
      new (m_object) T(*other);
  }
  optional& operator=(const optional& other) {
    clear();
    new (m_object) T(*other);
        m_initialized = other.m_initialized;
        return *this;
  }
  optional& operator=(nullopt_t) { clear(); return *this; }
  ~optional() { clear(); }
  operator bool() const { return m_initialized; };
  T& operator*() { return *reinterpret_cast<T*>(m_object); };
  const T& operator*() const { return *reinterpret_cast<const T*>(m_object); };
  T* operator->() { return &**this; };
  const T* operator->() const { return &**this; };
 private:
    void clear() { if (m_initialized) (&**this)->~T(); m_initialized = false; }
    char m_object[sizeof(T)];
    bool m_initialized;
};
}  // namespace details
#ifdef CXX17
template <typename T>
using optional = std::optional<T>;
constexpr std::nullopt_t nullopt = std::nullopt;
#else
template <typename T>
using optional = details::optional<T>;
constexpr details::nullopt_t nullopt = details::nullopt;
#else
#endif

}  // namespace sps

/* Local variables: */
/* indent-tabs-mode: nil */
/* tab-width: 2 */
/* c-basic-offset: 2 */
/* End: */
