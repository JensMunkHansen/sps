/**
 * @file   "sps/memory"
 * @author Jens Munk Hansen <jens.munk.hansen@gmail.com>
 * @date   Sun May  7 10:34:25 2017
 *
 * @brief
 *
 *
 */
#pragma once

#include <sps/cenv.h>
#include <sps/mm_malloc.h>
#include <sps/malloc.h>

#ifndef __cplusplus
# error This is a C++ header
#endif

#include <memory>
#include <functional>
#include <type_traits>

namespace sps {

  template <unsigned int alignment>
  struct is_aligned {
    static_assert((alignment & (alignment - 1)) == 0, "Alignment must be a power of 2");
    static inline bool value(const void * ptr) {
      return (((uintptr_t)ptr) & (alignment - 1)) == 0;
    }
  };

  /*! \brief aligned struct
   *
   * @tparam A alignment
   *
   * VC++ doesn't like combining templates with __declspec. This is a
   * work-around using inheritance.
   *
   * e.g. it is possible to do
   *
   * template <class T>
   * class AlignedClass : sps::aligned<16> {
   *
   * };
   *
   * or even
   *
   * template <class T>
   * class AlignedToFourOfAKind : sps::aligned<4*sizeof(T)> {
   *
   * };
   *
   * Using G++ or Clang, there is no need for this work-around and
   * we can do stuff like
   *
   * template <class T>
   * struct __attribute__((aligned(4*sizeof(T)))) Data
   * {
   *   T a;
   * };
   *
   */
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable:4324)
  __declspec(align(1)) struct align1 {};
  __declspec(align(2)) struct align2 {};
  __declspec(align(4)) struct align4 {};
  __declspec(align(8)) struct align8 {};
  __declspec(align(16)) struct align16 {};
  __declspec(align(32)) struct align32 {};
  template<int A> struct aligned;
  template<> struct aligned<1> : align1 {};
  template<> struct aligned<2> : align2 {};
  template<> struct aligned<4> : align4 {};
  template<> struct aligned<8> : align8 {};
  template<> struct aligned<16> : align16 {};
  template<> struct aligned<32> : align32 {};
#  pragma warning(pop)
#else
  template<int A> struct aligned;
  template<> struct __attribute__((aligned(1))) aligned<1>   { };
  template<> struct __attribute__((aligned(2))) aligned<2>   { };
  template<> struct __attribute__((aligned(4))) aligned<4>   { };
  template<> struct __attribute__((aligned(8))) aligned<8>   { };
  template<> struct __attribute__((aligned(16))) aligned<16> { };
  template<> struct __attribute__((aligned(32))) aligned<32> { };
#endif
} // namespace sps

#include <sps/win32/memory>
#include <sps/unix/memory>

#ifndef CXX11
// Backport std::make_unique from C++14
namespace std {
  template<typename T, typename ...Args>
  std::unique_ptr<T> make_unique(Args&& ...args)
  {
    return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
  }
} // namespace std
#endif // CX11

namespace sps {
#if (defined(__GNUG__) && __cplusplus >= 201103L)
  using sps::nix::deleted_aligned_array;
  using sps::nix::deleted_aligned_array_create;

  using sps::nix::deleted_aligned_multi_array;
  using sps::nix::deleted_aligned_multi_array_create;

  // Alias type to unique_multi_array
  template <class T, size_t I>
  using unique_multi_array = sps::nix::deleted_aligned_multi_array<T, I>;

  // Alias function to unique_multi_array_create (TODO: Do this correctly)
#if 0
  template <class T, size_t I>
  inline typename std::enable_if<I==2, deleted_aligned_multi_array<T,2> >::type
  unique_multi_array_create(size_t m, size_t n) {
    return sps::nix::deleted_aligned_multi_array_create<T,I>(m,n);
  }
#elif 1
  // Works
  template <class T, size_t I, typename... Args>
  auto unique_multi_array_create(Args&&... args) -> decltype(sps::nix::deleted_aligned_multi_array_create<T,I>(std::forward<Args>(args)...)) {
    return sps::nix::deleted_aligned_multi_array_create<T,I>(args...);
  }
#else
  // How
  template <typename ...ExplicitArgs, typename... Args>
  auto unique_multi_array_create(Args&&... args) -> decltype(sps::nix::deleted_aligned_multi_array_create<ExplicitArgs...>(std::forward<Args>(args)...)) {
    return sps::nix::deleted_aligned_multi_array_create<ExplicitArgs...>(args...);
  }
#endif


  // Leveled pointers and pointer levels
  template <typename T>
  struct ptr_depth_impl
  {
    enum { level = 0 };
  };

  template <typename T>
  struct ptr_depth_impl<T* const volatile>
  {
    enum { level = ptr_depth_impl<T const volatile>::level + 1 };
  };

  template <typename T>
  struct ptr_depth
  {
    enum { level = ptr_depth_impl<T const volatile>::level };
  };

  template <typename T, size_t lvl>
  struct depth_ptr
  {
    using value_type = typename depth_ptr<T*,lvl-1>::value_type;
  };

#ifndef __clang__
  // Can we do this in general
  template <>
#endif
  template <typename T>
  struct depth_ptr<T,0> {
    using value_type = T;
  };
#elif defined(_MSC_VER)

  // TODO: Figure out how Microsoft reveals true C++11
  using sps::win32::base_align16;
  using sps::win32::base_align32;

  using sps::win32::deleted_aligned_array;
  using sps::win32::deleted_aligned_array_create;

  using sps::win32::deleted_aligned_multi_array;
  using sps::win32::deleted_aligned_multi_array_create;
#else
  #error This library needs at least a C++11 compliant compiler
#endif
}  // namespace std

/* Local variables: */
/* mode: c++ */
/* indent-tabs-mode: nil */
/* tab-width: 2 */
/* c-basic-offset: 2 */
/* End: */
